<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns:mei="http://www.music-encoding.org/ns/mei" xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI Publisher ODD
                    
                 <desc>Base ODD from which all other ODDs inherit</desc>
                </title>
                <title type="short">TEI Publisher Base</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Default customization maintained by <ref target="http://tei-publisher.com">TEI
                        Publisher</ref>, building upon the ODD developed by TEI Consortium as tei_simplePrint.odd.</p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition xml:id="allcaps">text-transform: uppercase;</rendition>
                <rendition xml:id="blackletter">font-family: fantasy;</rendition>
                <rendition xml:id="bold">font-weight: bold;</rendition>
                <rendition xml:id="bottombraced">padding-bottom: 2pt; border-bottom: dashed gray
                2pt;</rendition>
                <rendition xml:id="block">display:block;</rendition>
                <rendition xml:id="boxed">padding: 2pt; border: solid black 1pt;</rendition>
                <rendition xml:id="centre">text-align: center;</rendition>
                <rendition xml:id="cursive">font-family: cursive;</rendition>
                <rendition xml:id="doublestrikethrough">text-decoration: line-through; color:
                red;</rendition>
                <rendition xml:id="doubleunderline">text-decoration: underline; color: red;</rendition>
                <rendition xml:id="dropcap">font-size : 6em; font-family: cursive; font-weight : bold;
                vertical-align: top; height: 1em; line-height: 1em; float : left; width : 1em; color :
                #c00; margin: 0em; padding: 0px;</rendition>
                <rendition xml:id="float">float:right; display: block; font-size: smaller; clear: right;
                padding: 4pt; width: 15%; </rendition>
                <rendition xml:id="hyphen"/>
                <rendition xml:id="inline">display:inline;</rendition>
                <rendition xml:id="italic">font-style: italic;</rendition>
                <rendition xml:id="justify">text-align: justify;</rendition>
                <rendition xml:id="larger">font-size: larger;</rendition>
                <rendition xml:id="left">text-align: left;</rendition>
                <rendition xml:id="leftbraced">padding-left: 2pt; border-left: dotted gray 2pt; </rendition>
                <rendition xml:id="letterspace">letter-spacing: 0.5em;</rendition>
                <rendition xml:id="literal">font-family:monospace; white-space:pre;</rendition>
                <rendition xml:id="normalstyle">font-style:roman;</rendition>
                <rendition xml:id="normalweight">font-weight:normal;</rendition>
                <rendition xml:id="right">text-align: right;</rendition>
                <rendition xml:id="rightbraced">padding-right: 2pt; border-right: dotted gray 2pt; </rendition>
                <rendition xml:id="rotateleft">-webkit-transform: rotate(90deg); transform:
                rotate(90deg);</rendition>
                <rendition xml:id="rotateright">-webkit-transform: rotate(-90deg); transform:
                rotate(-90deg);</rendition>
                <rendition xml:id="rules">border: 1px solid black; padding:
                2px;border-collapse:collapse;border-spacing:0;</rendition>
                <rendition xml:id="smallcaps">font-variant: small-caps;</rendition>
                <rendition xml:id="smaller">font-size: smaller;</rendition>
                <rendition xml:id="strikethrough">text-decoration: line-through;</rendition>
                <rendition xml:id="subscript">vertical-align: bottom; font-size: smaller;</rendition>
                <rendition xml:id="superscript">vertical-align: super; font-size: smaller;</rendition>
                <rendition xml:id="topbraced">padding-top: 2pt; border-top: dotted gray 2pt; </rendition>
                <rendition xml:id="typewriter">font-family:monospace;</rendition>
                <rendition xml:id="underline">text-decoration: underline;</rendition>
                <rendition xml:id="wavyunderline">text-decoration: underline; text-decoration-style:
                wavy;</rendition>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-03-17">merge teipublisher.odd with tei_simplePrint.odd and rework default models</change>
            <change when="2017-09-08">adjust metadata in teiHeader</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="teipublisher">
                <elementSpec ident="ab" mode="change">
                    <model behaviour="paragraph"/>
                </elementSpec>
                  <elementSpec ident="add" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            color: green; text-decoration: underline;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="anchor" mode="change">
                    <model behaviour="anchor">
            <param name="id" value="@xml:id"/>
        </model>
                </elementSpec>
                  <elementSpec ident="argument" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="author" mode="change">
                    <model predicate="ancestor::teiHeader" behaviour="block"/>
                    <model behaviour="inline"/>
                </elementSpec>
                  <elementSpec ident="back" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="bibl" mode="change">
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                    <model behaviour="inline"/>
                </elementSpec>
                  <elementSpec ident="body" mode="change">
                    <modelSequence>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                </elementSpec>
                  <elementSpec ident="byline" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="castGroup" mode="change">
                    <model predicate="child::*" behaviour="list">
            <desc>Insert list. </desc>
            <param name="content" value="castItem|castGroup"/>
        </model>
                </elementSpec>
                  <elementSpec ident="castItem" mode="change">
                    <model behaviour="listItem">
            <desc>Insert item, rendered as described in parent list rendition. </desc>
        </model>
                </elementSpec>
                  <elementSpec ident="castList" mode="change">
                    <model predicate="child::*" behaviour="list" useSourceRendition="true">
            <param name="content" value="castItem"/>
            <outputRendition xml:space="preserve">
            list-style: ordered;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="cb" mode="change">
                    <model behaviour="break">
            <param name="type" value="'column'"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                  <elementSpec ident="cell" mode="change">
                    <model behaviour="cell">
            <desc>Insert table cell. </desc>
        </model>
                </elementSpec>
                  <elementSpec ident="choice" mode="change">
                    <model predicate="sic and corr" behaviour="alternate">
            <param name="default" value="corr[1]"/>
            <param name="alternate" value="sic[1]"/>
        </model>
                    <model predicate="abbr and expan" behaviour="alternate">
            <param name="default" value="expan[1]"/>
            <param name="alternate" value="abbr[1]"/>
        </model>
                    <model predicate="orig and reg" behaviour="alternate">
            <param name="default" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
        </model>
                </elementSpec>
                  <elementSpec ident="cit" mode="change">
                    <model predicate="child::quote and child::bibl" behaviour="cit">
            <desc>Insert citation </desc>
        </model>
                </elementSpec>
                  <elementSpec ident="closer" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="code" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-family:monospace
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="corr" mode="change">
                    <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline">
            <desc>simple inline, if in parent choice. </desc>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="date" mode="change">
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                  <elementSpec ident="dateline" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="del" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            text-decoration: line-through;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="div" mode="change">
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="docTitle" mode="change">
                    <model behaviour="block" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-size: larger;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="edition" mode="change">
                    <model predicate="ancestor::teiHeader" behaviour="block">
            <outputRendition xml:space="preserve" scope="before">
            content: 'Edition: ';
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="epigraph" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="figure" mode="change">
                    <model predicate="head or @rendition='simple:display'" behaviour="block"/>
                    <model behaviour="inline"/>
                </elementSpec>
                  <elementSpec ident="floatingText" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            margin: 6pt; border: solid black 1pt;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="foreign" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style:italic;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="formula" mode="change">
                    <model predicate="@rendition='simple:display'" behaviour="block"/>
                    <model output="latex" predicate="@rend=&#34;display&#34;" behaviour="inline">
            <param name="content" value="string()"/>
            <pb:template xmlns="" xml:space="preserve">\begin{equation}[[content]]\end{equation}</pb:template>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="content" value="string()"/>
            <pb:template xmlns="" xml:space="preserve">\begin{math}[[content]]\end{math}</pb:template>
        </model>
                    <model predicate="@rend='display'" behaviour="webcomponent">
            <param name="name" value="'pb-formula'"/>
            <param name="display" value="true()"/>
        </model>
                    <model behaviour="webcomponent">
            <param name="name" value="'pb-formula'"/>
        </model>
                </elementSpec>
                  <elementSpec ident="front" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="fw" mode="change">
                    <model predicate="ancestor::p or ancestor::ab" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="g" mode="change">
                    <model predicate="not(text())" behaviour="glyph">
            <param name="uri" value="@ref"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                  <elementSpec ident="gap" mode="change">
                    <model predicate="desc" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model predicate="@extent" behaviour="inline">
            <param name="content" value="@extent"/>
            <outputRendition xml:space="preserve" scope="before">
            content: '[..';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '..]';
            </outputRendition>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[...]';
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="graphic" mode="change">
                    <model behaviour="graphic">
            <param name="url" value="@url"/>
            <param name="width" value="@width"/>
            <param name="height" value="@height"/>
            <param name="scale" value="@scale"/>
            <param name="title" value="desc"/>
        </model>
                </elementSpec>
                  <elementSpec ident="group" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="hi" mode="change">
                    <model behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="imprimatur" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="item" mode="change">
                    <model behaviour="listItem"/>
                </elementSpec>
                  <elementSpec ident="l" mode="change">
                    <model behaviour="block" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            margin-left: 1em;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="licence" mode="add">
                    <model output="web" predicate="@target" behaviour="link" cssClass="licence">
            <param name="content" value="'Licence'"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="omit"/>
                </elementSpec>
                  <elementSpec ident="lb" mode="change">
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                  <elementSpec ident="lg" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="list" mode="change">
                    <model behaviour="list" useSourceRendition="true">
            <param name="content" value="item"/>
        </model>
                </elementSpec>
                  <elementSpec ident="listBibl" mode="change">
                    <model predicate="bibl" behaviour="list"/>
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="notatedMusic" mode="add">
                    <model behaviour="figure">
            <param name="title" value="label"/>
            <param name="content" value="(ptr, mei:mdiv)"/>
        </model>
                </elementSpec>
                  <elementSpec ident="note" mode="change">
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                  <elementSpec ident="opener" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="p" mode="change">
                    <model output="print" predicate="ancestor::note" behaviour="inline"/>
                    <model behaviour="paragraph" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="pb" mode="change">
                    <model predicate="@facs" behaviour="webcomponent">
            <desc>Use the url from the facs attribute to link with IIIF image</desc>
            <param name="name" value="'pb-facs-link'"/>
            <param name="facs" value="@facs"/>
            <param name="label" value="@n"/>
            <param name="emit" value="'transcription'"/>
        </model>
                    <model predicate="starts-with(@facs, 'iiif:')" behaviour="webcomponent">
            <desc>If facs attribute starts with iiif prefix, use the trailing part as a link to the IIIF image</desc>
            <param name="name" value="'pb-facs-link'"/>
            <param name="facs" value="replace(@facs, '^iiif:(.*)$', '$1')"/>
            <param name="label" value="'Page'"/>
            <param name="emit" value="'transcription'"/>
        </model>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'page'"/>
            <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
            <outputRendition xml:space="preserve">
            display: block; margin-left: 4pt; color: grey; float: right;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: '[Page ';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="postscript" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="ptr" mode="add">
                    <model predicate="parent::notatedMusic" behaviour="pass-through">
            <desc>Load and display external MEI</desc>
            <param name="url" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><pb-mei url="[[url]]" player="player">
                              <pb-option name="appXPath" on="./rdg[contains(@label, 'original')]" off="">Original Clefs</pb-option>
                              </pb-mei></pb:template>
        </model>
                </elementSpec>
                  <elementSpec ident="publicationStmt" mode="add">
                    <model output="web" behaviour="block">
            <param name="content" value="availability/licence"/>
        </model>
                    <model behaviour="omit"/>
                </elementSpec>
                  <elementSpec ident="q" mode="change">
                    <model predicate="l" behaviour="block" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            margin-left: 10px; margin-right: 10px;
            </outputRendition>
        </model>
                    <model predicate="ancestor::p or ancestor::cell" behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve" scope="before">
            content: '‘';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '’';
            </outputRendition>
        </model>
                    <model behaviour="block" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            margin-left: 10px; margin-right: 10px;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="quote" mode="change">
                    <model predicate="ancestor::p" behaviour="inline" useSourceRendition="true">
            <desc>If it is inside a paragraph then it is inline, otherwise it is block
                        level</desc>
            <outputRendition xml:space="preserve" scope="before">
            content: '‘';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '’';
            </outputRendition>
        </model>
                    <model behaviour="block" useSourceRendition="true">
            <desc>If it is inside a paragraph then it is inline, otherwise it is block
                        level</desc>
            <outputRendition xml:space="preserve">
            margin-left: 10px; margin-right: 10px;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="ref" mode="change">
                    <model predicate="@target" behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                  <elementSpec ident="role" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="roleDesc" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="row" mode="change">
                    <model predicate="@role='label'" behaviour="row">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="row">
            <desc>Insert table row. </desc>
        </model>
                </elementSpec>
                  <elementSpec ident="salute" mode="change">
                    <model predicate="parent::closer" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="seg" mode="change">
                    <model behaviour="inline" useSourceRendition="true"/>
                </elementSpec>
                  <elementSpec ident="sic" mode="change">
                    <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline"/>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '{';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '}';
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="signed" mode="change">
                    <model predicate="parent::closer" behaviour="block">
            <outputRendition xml:space="preserve">
            text-align: right;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="sp" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="speaker" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            font-style:italic;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="spGrp" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                  <elementSpec ident="stage" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="supplied" mode="change">
                    <model predicate="parent::choice" behaviour="inline"/>
                    <model predicate="@reason='damage'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"&lt;";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"&gt;";
            </outputRendition>
        </model>
                    <model predicate="@reason='illegible' or not(@reason)" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"[";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"]";
            </outputRendition>
        </model>
                    <model predicate="@reason='omitted'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"(";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:")";
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:"{";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"}";
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="table" mode="change">
                    <model behaviour="table">
            <outputRendition xml:space="preserve">
            font-size: smaller; background-color: #F0F0F0;
            </outputRendition>
        </model>
                </elementSpec>
                   <elementSpec ident="fileDesc" mode="change">
                    <modelSequence predicate="$parameters?header='short'">
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="titleStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="editionStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="publicationStmt"/>
            </model>
            <model behaviour="block" cssClass="sample-description">
                <desc>Output abstract containing demo description</desc>
                <param name="content" value="../profileDesc/abstract"/>
            </model>
        </modelSequence>
                    <model behaviour="title">
            <param name="content" value="titleStmt"/>
        </model>
                </elementSpec>
                  <elementSpec ident="profileDesc" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                  <elementSpec ident="revisionDesc" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                  <elementSpec ident="encodingDesc" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                   <elementSpec ident="teiHeader" mode="change">
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                  <elementSpec ident="TEI" mode="change">
                    <model behaviour="document"/>
                </elementSpec>
                  <elementSpec ident="text" mode="change">
                    <model behaviour="body"/>
                </elementSpec>
                  <elementSpec ident="time" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
                 <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="titlePage" mode="change">
                    <model behaviour="block" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: center;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="titlePart" mode="change">
                    <model behaviour="block" useSourceRendition="true"/>
                </elementSpec>
                  <elementSpec ident="titleStmt" mode="add">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                     
                  <elementSpec ident="trailer" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            color: green;
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="unclear" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="after">
            content: ' [?] ';
            </outputRendition>
        </model>
                </elementSpec>
                  <elementSpec ident="w" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>      
            <elementSpec ident="mei:mdiv" mode="add">
        <model behaviour="pass-through">
            <desc>Single MEI mdiv needs to be wrapped to create complete MEI document</desc>
            <param name="data" value="let $title := root($parameters?root)//titleStmt/title let $data :=   &lt;mei xmlns=&#34;http://www.music-encoding.org/ns/mei&#34; meiversion=&#34;4.0.0&#34;&gt;     &lt;meiHead&gt;         &lt;fileDesc&gt;             &lt;titleStmt&gt;                 &lt;title&gt;&lt;/title&gt;             &lt;/titleStmt&gt;             &lt;pubStmt&gt;&lt;/pubStmt&gt;         &lt;/fileDesc&gt;     &lt;/meiHead&gt;     &lt;music&gt;         &lt;body&gt;{.}&lt;/body&gt;     &lt;/music&gt;   &lt;/mei&gt; return   serialize($data)"/>
            <pb:template xmlns="" xml:space="preserve"><pb-mei player="player" data="[[data]]"/></pb:template>
        </model>
    </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>