<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>
                    Processing Model for Docbook v5
                    
                  
                 
                 
                  
                 <desc>Processing of Docbook format</desc>
                </title>
                <title type="short">Docbook v5 </title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under
                        GNU General Public License</licence>
                    <p>
                        Copyright 2017
                        <ref target="http://existsolutions.com">eXistSolutions
                            GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify it under
                        the terms of the GNU General Public License as published by the Free
                        Software Foundation, either version 3 of the License, or (at your option)
                        any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT
                        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
                        FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
                        more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>
                    Generated by
                    <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <pb:behaviour ident="code" output="latex">
                    <desc>Code listing</desc>
                    <pb:param name="language" value="if (@language = ('xml', 'html', 'sh', 'bash')) then '[language=' || @language || ']' else ()"/>
                    <pb:param name="code" value="replace($content, '^\s*(.*?)$', '$1')"/>
                    <pb:template xmlns="" xml:space="preserve">\begin{lstlisting}[[language]]
[[code]]
\end{lstlisting} </pb:template>
                </pb:behaviour>
                <pb:behaviour ident="code" output="fo">
                    <desc>Code listing</desc>
                    <pb:param name="language" value="@language"/>
                    <pb:template xmlns="" xml:space="preserve">
                        <fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" space-before=".5em" space-after=".5em" padding-left="1em" padding-right="1em" padding-top=".5em" padding-bottom=".5em" border-color="#A0A0A0" border="solid 2pt" font-family="monospace" font-size=".85em" line-height="1.2" hyphenate="false" white-space="pre" wrap-option="wrap">[[content]]</fo:block>
                    </pb:template>
                </pb:behaviour>
                <pb:behaviour ident="definitionList" output="web">
                    <pb:template xmlns="" xml:space="preserve">
                        <dl>[[content]]</dl>
                    </pb:template>
                </pb:behaviour>
                <pb:behaviour ident="definition" output="web">
                    <pb:param name="term"/>
                    <pb:template xmlns="" xml:space="preserve">
                        <dt>[[term]]</dt>
                        <dd>[[content]]</dd>
                    </pb:template>
                </pb:behaviour>
                <pb:behaviour ident="definitionList" output="fo">
                    <pb:template xmlns="" xml:space="preserve">
                        <fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format">[[content]]</fo:block>
                    </pb:template>
                </pb:behaviour>
                <pb:behaviour ident="definition" output="fo">
                    <pb:param name="term"/>
                    <pb:template xmlns="" xml:space="preserve">
                        <pb:template>
                            <fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format">[[content]]</fo:block>
                        </pb:template>
                    </pb:template>
                </pb:behaviour>
                <pb:behaviour ident="definitionList" output="latex">
                    <pb:template xmlns="" xml:space="preserve">\begin{description}
[[content]]
\end{description}</pb:template>
                </pb:behaviour>
                <pb:behaviour ident="definition" output="latex">
                    <pb:param name="term"/>
                    <pb:template xmlns="" xml:space="preserve">\item [[[term]]] [[content]]</pb:template>
                </pb:behaviour>
                <pb:behaviour ident="iframe">
                    <pb:param name="src"/>
                    <pb:param name="width"/>
                    <pb:param name="height"/>
                    <pb:template xmlns="" xml:space="preserve">
                        <iframe src="[[src]]" width="[[width]]" height="[[height]]" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen="allowfullscreen"/>
                    </pb:template>
                </pb:behaviour>
                <rendition source="docbook.css"/>
            </tagsDecl>
        </encodingDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="docbook" ns="http://docbook.org/ns/docbook">
                <elementSpec ident="article">
                    <model output="latex" behaviour="block">
            <param name="image-dir" value="$parameters?image-dir"/>
            <param name="styles" value="string-join($config(&#34;latex-styles&#34;), '&amp;#10;')"/>
            <param name="fontSize" value="($config?font-size, &#34;11pt&#34;)[1]"/>
            <param name="class" value="($config?class, &#34;article&#34;)[1]"/>
            <pb:template xmlns="" xml:space="preserve">\documentclass[english,a4paper,[[fontSize]]]{[[class]]}
\usepackage[english]{babel}
\usepackage{colortbl}
\usepackage{xcolor}
\usepackage{fancyhdr}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{mdframed}
\usepackage[export]{adjustbox}
\usepackage{hyperref}
\usepackage{longtable}
\usepackage{tabu}

\pagestyle{fancy}

\definecolor{myblue}{rgb}{0,0.1,0.6}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{
  basicstyle=\small\ttfamily,
  columns=flexible,
  keepspaces=true,
  breaklines=true,
  keywordstyle=\color{myblue}
}
\lstloadlanguages{xml}

\def\Gin@extensions{.pdf,.png,.jpg,.mps,.tif}
\graphicspath{{[[image-dir]]/doc/}}

[[styles]]

\begin{document}
[[content]]
\end{document}</pb:template>
        </model>
                    <model predicate="$parameters?mode='summary'" behaviour="block">
            <param name="content" value="info"/>
        </model>
                    <model behaviour="document"/>
                </elementSpec>
                <elementSpec ident="info">
                    <model output="print" predicate="parent::article|parent::book" behaviour="block" cssClass="frontmatter">
            <param name="content" value="(title, if ($parameters?skipAuthors) then () else author, pubdate, abstract)"/>
        </model>
                    <model output="latex" predicate="parent::article|parent::book" behaviour="inline">
            <param name="content" value="title"/>
            <param name="author" value="author"/>
            <pb:template xmlns="" xml:space="preserve">[[content]] \author{[[author]]}
\maketitle</pb:template>
        </model>
                    <model predicate="not(parent::article or parent::book)" behaviour="block"/>
                    <model output="epub" behaviour="block">
            <param name="content" value="(title, author)"/>
        </model>
                    <modelSequence predicate="$parameters?header='short'">
            <model behaviour="heading">
                <param name="content" value="title"/>
                <param name="level" value="5"/>
            </model>
            <model predicate="author" behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model behaviour="block">
            <param name="content" value="(title, if ($parameters?skipAuthors) then () else author, pubdate, abstract)"/>
        </model>
                </elementSpec>
                <elementSpec ident="author">
                    <model output="latex" predicate="preceding-sibling::author" behaviour="inline">
            <param name="content" value="(personname, affiliation)"/>
            <pb:template xmlns="" xml:space="preserve">\and [[content]]</pb:template>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="content" value="(personname, affiliation)"/>
            <pb:template xmlns="" xml:space="preserve">[[content]]</pb:template>
        </model>
                    <model predicate="preceding-sibling::author and not($parameters?skipAuthors)" behaviour="inline">
            <param name="content" value="(', ', personname, affiliation)"/>
        </model>
                    <model predicate="not($parameters?skipAuthors)" behaviour="inline">
            <param name="content" value="(personname, affiliation)"/>
        </model>
                </elementSpec>
                <elementSpec ident="personname">
                    <model behaviour="inline">
            <param name="content" value="(firstname, ' ', surname)"/>
        </model>
                </elementSpec>
                <elementSpec ident="affiliation">
                    <model behaviour="inline">
            <param name="content" value="(', ', .)"/>
        </model>
                </elementSpec>
                <elementSpec ident="title">
                    <model output="latex" predicate="parent::info" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve">\title{[[content]]}</pb:template>
        </model>
                    <model predicate="$parameters?mode='summary'" behaviour="block" cssClass="articletitle">
            <param name="content" value="node()"/>
            <param name="path" value="$parameters?path"/>
            <pb:template xmlns="" xml:space="preserve">
                            <h1>
                                <pb-link path="[[path]]" emit="transcription">[[content]]</pb-link>
                            </h1>
                        </pb:template>
        </model>
                    <model predicate="$parameters?mode='breadcrumbs'" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            







                            content: ' &gt; ';
                            color: #607d8b;







            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model predicate="parent::note" behaviour="heading">
            <param name="level" value="4"/>
        </model>
                    <model predicate="parent::info and $parameters?header='short'" behaviour="link">
            <param name="uri" value="$parameters?doc"/>
        </model>
                    <model predicate="parent::info" behaviour="heading" cssClass="doc-title"/>
                    <model behaviour="heading" cssClass="title">
            <param name="level" value="if ($parameters?view='single') then count(ancestor::section) + 1 else count($get(.)/ancestor::section)"/>
        </model>
                </elementSpec>
                <elementSpec ident="section">
                    <modelSequence predicate="$parameters?mode='breadcrumbs'">
            <model behaviour="inline">
                <param name="content" value="$get(.)/ancestor::section/title"/>
            </model>
            <model behaviour="inline">
                <param name="content" value="title"/>
            </model>
        </modelSequence>
                    <model output="print" behaviour="section"/>
                    <model output="web" behaviour="block">
            <param name="root" value="util:node-id($parameters?root)"/>
            <param name="nodeId" value="util:node-id($get(.))"/>
            <pb:template xmlns="" xml:space="preserve">
                            <pb-observable data="[[root]],[[nodeId]]" emit="transcription">[[content]]</pb-observable>
                        </pb:template>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="para">
                    <model behaviour="paragraph"/>
                </elementSpec>
                <elementSpec ident="emphasis">
                    <model predicate="@role='bold'" behaviour="inline">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            font-weight: 400;
font-style: italic;
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="code">
                    <model output="latex" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve">\texttt{[[content]]}</pb:template>
        </model>
                    <model behaviour="inline" cssClass="code"/>
                </elementSpec>
                <elementSpec ident="figure">
                    <model output="latex" predicate="mediaobject/imageobject/imagedata[ends-with(@fileref, '.gif')]" behaviour="omit"/>
                    <model predicate="title|info/title" behaviour="figure" cssClass="figure">
            <param name="title" value="title/node()|info/title/node()"/>
            <param name="content" value="*[not(self::title|self::info)]"/>
        </model>
                    <model behaviour="figure"/>
                </elementSpec>
                <elementSpec ident="informalfigure">
                    <model predicate="caption" behaviour="figure" cssClass="figure">
            <param name="title" value="caption/node()"/>
            <param name="content" value="*[not(self::caption)]"/>
        </model>
                    <model behaviour="figure" cssClass="figure"/>
                </elementSpec>
                <elementSpec ident="imagedata">
                    <model output="latex" behaviour="graphic">
            <param name="url" value="@fileref"/>
            <outputRendition xml:space="preserve">
            max-width: 100%;
            </outputRendition>
        </model>
                    <model behaviour="graphic">
            <param name="url" value="@fileref"/>
            <param name="width" value="@width"/>
            <outputRendition xml:space="preserve">
            max-width: 100%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="itemizedlist">
                    <model behaviour="list">
            <param name="content" value="listitem"/>
        </model>
                </elementSpec>
                <elementSpec ident="listitem">
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="orderedlist">
                    <model behaviour="list">
            <param name="type" value="'ordered'"/>
            <param name="content" value="listitem"/>
        </model>
                </elementSpec>
                <elementSpec ident="procedure">
                    <model behaviour="list">
            <param name="type" value="'ordered'"/>
            <param name="content" value="step"/>
        </model>
                </elementSpec>
                <elementSpec ident="step">
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="variablelist">
                    <model behaviour="definitionList">
            <param name="content" value="varlistentry"/>
        </model>
                </elementSpec>
                <elementSpec ident="varlistentry">
                    <model behaviour="definition">
            <param name="term" value="term/node()"/>
            <param name="content" value="listitem/node()"/>
        </model>
                </elementSpec>
                <elementSpec ident="table" mode="add">
                    <modelSequence predicate="title">
            <model behaviour="heading">
                <param name="content" value="title"/>
            </model>
            <model behaviour="table">
                <param name="content" value=".//tr"/>
                <param name="columns" value="max(.//tr ! count(td))"/>
            </model>
        </modelSequence>
                    <model behaviour="table" cssClass="table">
            <param name="content" value=".//tr"/>
            <param name="columns" value="max(.//tr ! count(td))"/>
        </model>
                </elementSpec>
                <elementSpec ident="informaltable" mode="add">
                    <model behaviour="table" cssClass="table">
            <param name="content" value=".//tr"/>
            <param name="columns" value="max(.//tr ! count(td))"/>
        </model>
                </elementSpec>
                <elementSpec ident="tr">
                    <model behaviour="row"/>
                </elementSpec>
                <elementSpec ident="td">
                    <model predicate="parent::tr/parent::thead" behaviour="cell">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="cell"/>
                </elementSpec>
                <elementSpec ident="programlisting">
                    <model output="epub" behaviour="block">
            <param name="content" value="text()"/>
            <outputRendition xml:space="preserve">
            
            
            font-family: monospace;
margin: 1em 0 1em .5em;
padding: 1em 0 1em .5em;
white-space: pre-wrap;
            
            
            </outputRendition>
        </model>
                    <model output="latex" behaviour="code">
            <param name="language" value="@language"/>
        </model>
                    <modelGrp output="web">
            <model predicate="@role='codepen'" behaviour="webcomponent">
                <param name="hash" value="substring-after(@xlink:href, '#')"/>
                <param name="user" value="substring-before(@xlink:href, '#')"/>
                <param name="name" value="'pb-codepen'"/>
                <param name="theme" value="'dark'"/>
                <param name="height" value="480"/>
                <param name="editable" value="true()"/>
            </model>
            <model predicate="parent::cell|parent::para|parent::ab" behaviour="inline" cssClass="code"/>
            <model behaviour="webcomponent">
                <param name="name" value="'pb-code-highlight'"/>
                <param name="language" value="(@language, 'xml')[1]"/>
                <param name="content" value="text()"/>
                <param name="line-numbers" value="false()"/>
            </model>
        </modelGrp>
                    <model behaviour="block" cssClass="programlisting"/>
                </elementSpec>
                <elementSpec ident="synopsis">
                    <model output="epub" behaviour="block">
            <param name="content" value="text()"/>
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            



            font-family: monospace;
margin: 1em 0 1em .5em;
padding: 1em 0 1em .5em;
white-space: pre-wrap;



            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model output="latex" behaviour="code"/>
                    <model output="print" behaviour="block" cssClass="programlisting"/>
                    <model behaviour="webcomponent">
            <param name="name" value="'pb-code-highlight'"/>
            <param name="language" value="@language"/>
            <param name="content" value="text()"/>
        </model>
                </elementSpec>
                <elementSpec ident="example">
                    <model behaviour="figure">
            <param name="title" value="info/title/node()|title/node()"/>
            <param name="content" value="*[not(self::title|self::info)]"/>
        </model>
                </elementSpec>
                <elementSpec ident="function">
                    <model behaviour="inline" cssClass="code"/>
                </elementSpec>
                <elementSpec ident="command">
                    <model behaviour="inline" cssClass="code"/>
                </elementSpec>
                <elementSpec ident="parameter">
                    <model behaviour="inline" cssClass="code"/>
                </elementSpec>
                <elementSpec ident="filename">
                    <model behaviour="inline" cssClass="code"/>
                </elementSpec>
                <elementSpec ident="note">
                    <model output="epub" behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            




            border-top: 1px solid #C0C4C0;
border-bottom: 1px solid #C0C4C0;
margin: 1em 0 1em .5em;
padding: 1em 0 1em .5em;
-webkit-column-break-inside: avoid; /* Chrome, Safari, Opera */
          page-break-inside: avoid; /* Firefox */
               break-inside: avoid; /* IE 10+ */




            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="title" value="title"/>
            <param name="content" value="*[not(self::title)]"/>
            <pb:template xmlns="" xml:space="preserve">\begin{mdframed}[frametitle={[[title]]}]
[[content]]
\end{mdframed}</pb:template>
        </model>
                    <model output="web" behaviour="block" cssClass="note">
            <param name="content" value="(title, *[not(self::title)])"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="tag">
                    <model behaviour="inline" cssClass="code">
            <outputRendition xml:space="preserve" scope="before">
            content: '&lt;';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '&gt;';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="link">
                    <model output="epub" predicate="@role='source'" behaviour="inline">
            <param name="uri" value="@xlink:href"/>
        </model>
                    <model output="web" predicate="@role='source'" behaviour="inline">
            <param name="path" value="@xlink:href"/>
            <pb:template xmlns="" xml:space="preserve">
                            <pb-edit-xml path="/db/apps/tei-publisher/[[path]]">
                                [[content]]
                                <iron-icon icon="icons:open-in-new"/>
                            </pb-edit-xml>
                        </pb:template>
        </model>
                    <model predicate="@linkend" behaviour="webcomponent">
            <param name="uri" value="concat('?odd=', request:get-parameter('odd', ()), '&amp;amp;view=',                             request:get-parameter('view', ()), '&amp;amp;id=', @linkend)"/>
            <param name="name" value="'pb-link'"/>
            <param name="xml-id" value="@linkend"/>
            <param name="emit" value="'transcription'"/>
        </model>
                    <model predicate="@xlink:show='new'" behaviour="link">
            <param name="uri" value="@xlink:href"/>
            <param name="target" value="'_new'"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@xlink:href"/>
        </model>
                </elementSpec>
                <elementSpec ident="*">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="guibutton" mode="add">
                    <model behaviour="inline" cssClass="guibutton"/>
                </elementSpec>
                <elementSpec ident="guilabel" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="videodata" mode="add">
                    <model output="latex" behaviour="block">
            <param name="content" value="@fileref"/>
            <pb:template xmlns="" xml:space="preserve">\begin{center}
Not available in PDF edition. Go to \url{[[content]]} to view.
\end{center}</pb:template>
        </model>
                    <model behaviour="iframe">
            <param name="width" value="@width"/>
            <param name="height" value="@depth"/>
            <param name="src" value="@fileref"/>
            <outputRendition xml:space="preserve">
            max-width: 100%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="mediaobject" mode="add">
                    <model output="latex" predicate="imageobject/imagedata[ends-with(@fileref, '.gif')]" behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="abstract" mode="add">
                    <model predicate="$parameters?path = $parameters?active" behaviour="omit"/>
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            





            color: #909090;
padding-left: 10px;
border-left: 3px solid #c0c0c0;





            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="pubdate" mode="add">
                    <model behaviour="inline" cssClass="pubdate">
            <param name="content" value="format-date(., '[MNn] [D1], [Y0001]', 'en_US', (), ())"/>
            <outputRendition xml:space="preserve">
            color: #808080;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="footnote" mode="add">
                    <model behaviour="note"/>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>