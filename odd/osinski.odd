<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Bogactwa mowy polskiej</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition selector=".translation">
                    color: #8888aa;
                    text-indent: 2em;
                </rendition>
                <rendition selector=".example">
                    color: #88aa88;
                    text-indent: 1em;
                </rendition>
                <rendition selector=".ref-author">
                    color: #888888;
                    font-size: 0.8em;
                </rendition>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2019-12-31+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="osinski" source="teipublisher.odd"> <elementSpec ident="entryFree" mode="add">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model predicate="starts-with(@facs, 'iiif:')" behaviour="webcomponent" cssClass="facs" useSourceRendition="true">
            <param name="name" value="'pb-facs-link'"/>
            <param name="content" value="@n"/>
            <param name="emit" value="'transcription'"/>
            <param name="facs" value="replace(@facs, '^iiif:(.*)$', '$1')"/>
            <outputRendition xml:space="preserve">
            font-size: 16px;
                            color: #888888;
                            cursor: pointer;
                            display: inline;
                            display: block;
                            margin-right: -32px;
                            float: right;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="form" mode="add">
                    <model predicate="starts-with(@facs, 'iiif:')" behaviour="webcomponent" cssClass="facs columnbreak">
            <param name="name" value="'pb-facs-link'"/>
            <param name="facs" value="replace(@facs, '^iiif:([^/]+).*$', '$1')"/>
            <param name="content" value="."/>
            <param name="coordinates" value="('[' || replace(@facs, '^iiif:[^/]+/(.*)$', '$1') || ']')"/>
            <param name="emit" value="'transcription'"/>
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gram" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="parent::cit or parent::def" behaviour="inline" cssClass="ref-author">
            <desc>references (authors) within translations, examples or definitions</desc>
        </model>
                    <model predicate="not(@target)" behaviour="inline"/>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="cit" mode="change">
                    <model predicate="@type='example'" behaviour="block" cssClass="example"/>
                    <model predicate="@type='translation'" behaviour="block" cssClass="translation"/>
                </elementSpec>
                <elementSpec ident="quote" mode="change">
                    <model predicate="ancestor::cit" behaviour="inline">
            <desc>quotes within cit should be treated as inline, cit is the block unit</desc>
        </model>
                    <model predicate="ancestor::p" behaviour="inline" useSourceRendition="true">
            <desc>If it is inside a paragraph then it is inline, otherwise it is block                  level</desc>
            <outputRendition xml:space="preserve" scope="before">
            content: '‘';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '’';
            </outputRendition>
        </model>
                    <model behaviour="block" useSourceRendition="true">
            <desc>If it is inside a paragraph then it is inline, otherwise it is block                  level</desc>
            <outputRendition xml:space="preserve">
            margin-left: 10px; margin-right: 10px;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="oRef" mode="add">
                    <model behaviour="inline">
            <desc>marker for headword reference; rendered as dash</desc>
            <outputRendition xml:space="preserve" scope="before">
            content: '—';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gen" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@norm"/>
        </model>
                </elementSpec>
                <elementSpec ident="pos" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@norm"/>
        </model>
                </elementSpec>
            <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <modelSequence output="web" predicate="$parameters?mode='title' ">
            <model behaviour="inline">
                <param name="content" value="title[1]"/>
            </model>
            <model behaviour="inline">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='metadata'" behaviour="block"/>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="(author, editor)"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="editor" mode="change">
                    <model predicate="ancestor::teiHeader" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model output="web" predicate="$parameters?mode='metadata'" behaviour="block"/>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?mode='metadata'" behaviour="omit"/>
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline" cssClass="foo"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="fileDesc" mode="change">
                    <model predicate="$parameters?mode='metadata'" behaviour="block"/>
                    <modelSequence predicate="$parameters?header='short'">
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="titleStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="editionStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="publicationStmt"/>
            </model>
            <model behaviour="block" cssClass="sample-description">
                <desc>Output abstract containing demo description</desc>
                <param name="content" value="../profileDesc/abstract"/>
            </model>
        </modelSequence>
                    <model behaviour="title">
            <param name="content" value="titleStmt"/>
        </model>
                </elementSpec>
                <elementSpec ident="msDesc" mode="add">
                    <modelSequence>
            <model behaviour="block">
                <desc>retrieves the primary language </desc>
                <param name="content" value="(root(.)//langUsage/language)"/>
                <outputRendition xml:space="preserve" scope="before">
                content: 'Primary language: ';
                </outputRendition>
            </model>
            <model behaviour="block">
                <desc>retrieves the form of the source from taxonomy file</desc>
                <param name="content" value="id(substring-after(root(.)//catRef[@scheme='#form']/@target, '#'), doc('/db/apps/tei-publisher/data/taxonomy.xml'))"/>
                <outputRendition xml:space="preserve" scope="before">
                content: 'Primary source: ';
                </outputRendition>
            </model>
            <model behaviour="block">
                <outputRendition xml:space="preserve">
                content: 'Location: ';
                </outputRendition>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="institution" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="respStmt" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="persName"/>
            <param name="alternate" value="resp"/>
        </model>
                </elementSpec>
                <elementSpec ident="idno" mode="add">
                    <modelSequence>
            <model behaviour="inline"/>
            <model behaviour="inline">
                <param name="content" value="ancestor::msDesc/@type"/>
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
                <outputRendition xml:space="preserve" scope="before">
                content: ' (';
                </outputRendition>
                <outputRendition xml:space="preserve" scope="after">
                content: ')';
                </outputRendition>
            </model>
        </modelSequence>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>